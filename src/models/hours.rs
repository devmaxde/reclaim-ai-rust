/*
 * Reclaim SDK API
 *
 * Unofficial Reclaim.ai API based on the provided Python SDK.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Hours {
    /// Unique identifier of the time scheme
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Status of the time scheme
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Task category
    #[serde(rename = "taskCategory", skip_serializing_if = "Option::is_none")]
    pub task_category: Option<String>,
    /// Target calendar for tasks
    #[serde(rename = "taskTargetCalendar", skip_serializing_if = "Option::is_none")]
    pub task_target_calendar: Option<serde_json::Value>,
    /// Title of the time scheme
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// Description of the time scheme
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// List of features associated with the time scheme
    #[serde(rename = "features", skip_serializing_if = "Option::is_none")]
    pub features: Option<Vec<String>>,
}

impl Hours {
    pub fn new() -> Hours {
        Hours {
            id: None,
            status: None,
            task_category: None,
            task_target_calendar: None,
            title: None,
            description: None,
            features: None,
        }
    }
}

