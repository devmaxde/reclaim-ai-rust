/*
 * Reclaim SDK API
 *
 * Unofficial Reclaim.ai API based on the provided Python SDK.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Task {
    /// Unique identifier of the task
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Creation timestamp
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    /// Last update timestamp
    #[serde(rename = "updated", skip_serializing_if = "Option::is_none")]
    pub updated: Option<String>,
    /// Task title
    #[serde(rename = "title")]
    pub title: String,
    /// Task notes
    #[serde(rename = "notes", skip_serializing_if = "Option::is_none")]
    pub notes: Option<String>,
    #[serde(rename = "eventCategory", skip_serializing_if = "Option::is_none")]
    pub event_category: Option<models::EventCategory>,
    /// Event subtype
    #[serde(rename = "eventSubType", skip_serializing_if = "Option::is_none")]
    pub event_sub_type: Option<String>,
    /// Time scheme ID (custom hours)
    #[serde(rename = "timeSchemeId", skip_serializing_if = "Option::is_none")]
    pub time_scheme_id: Option<String>,
    /// Time chunks required
    #[serde(rename = "timeChunksRequired", skip_serializing_if = "Option::is_none")]
    pub time_chunks_required: Option<i32>,
    /// Minimum chunk size
    #[serde(rename = "minChunkSize", skip_serializing_if = "Option::is_none")]
    pub min_chunk_size: Option<i32>,
    /// Maximum chunk size
    #[serde(rename = "maxChunkSize", skip_serializing_if = "Option::is_none")]
    pub max_chunk_size: Option<i32>,
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<models::TaskPriority>,
    /// Task is on deck
    #[serde(rename = "onDeck", skip_serializing_if = "Option::is_none")]
    pub on_deck: Option<bool>,
    /// Task is always private
    #[serde(rename = "alwaysPrivate", skip_serializing_if = "Option::is_none")]
    pub always_private: Option<bool>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<models::TaskStatus>,
    /// Due date
    #[serde(rename = "due", skip_serializing_if = "Option::is_none")]
    pub due: Option<String>,
    /// Snooze until date
    #[serde(rename = "snoozeUntil", skip_serializing_if = "Option::is_none")]
    pub snooze_until: Option<String>,
    /// Task index
    #[serde(rename = "index", skip_serializing_if = "Option::is_none")]
    pub index: Option<f64>,
    #[serde(rename = "eventColor", skip_serializing_if = "Option::is_none")]
    pub event_color: Option<models::EventColor>,
}

impl Task {
    pub fn new(title: String) -> Task {
        Task {
            id: None,
            created: None,
            updated: None,
            title,
            notes: None,
            event_category: None,
            event_sub_type: None,
            time_scheme_id: None,
            time_chunks_required: None,
            min_chunk_size: None,
            max_chunk_size: None,
            priority: None,
            on_deck: None,
            always_private: None,
            status: None,
            due: None,
            snooze_until: None,
            index: None,
            event_color: None,
        }
    }
}

