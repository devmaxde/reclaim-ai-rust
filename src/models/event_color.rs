/*
 * Reclaim SDK API
 *
 * Unofficial Reclaim.ai API based on the provided Python SDK.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EventColor {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "LAVENDER")]
    Lavender,
    #[serde(rename = "SAGE")]
    Sage,
    #[serde(rename = "GRAPE")]
    Grape,
    #[serde(rename = "FLAMINGO")]
    Flamingo,
    #[serde(rename = "BANANA")]
    Banana,
    #[serde(rename = "TANGERINE")]
    Tangerine,
    #[serde(rename = "PEACOCK")]
    Peacock,
    #[serde(rename = "GRAPHITE")]
    Graphite,
    #[serde(rename = "BLUEBERRY")]
    Blueberry,
    #[serde(rename = "BASIL")]
    Basil,
    #[serde(rename = "TOMATO")]
    Tomato,

}

impl std::fmt::Display for EventColor {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::None => write!(f, "NONE"),
            Self::Lavender => write!(f, "LAVENDER"),
            Self::Sage => write!(f, "SAGE"),
            Self::Grape => write!(f, "GRAPE"),
            Self::Flamingo => write!(f, "FLAMINGO"),
            Self::Banana => write!(f, "BANANA"),
            Self::Tangerine => write!(f, "TANGERINE"),
            Self::Peacock => write!(f, "PEACOCK"),
            Self::Graphite => write!(f, "GRAPHITE"),
            Self::Blueberry => write!(f, "BLUEBERRY"),
            Self::Basil => write!(f, "BASIL"),
            Self::Tomato => write!(f, "TOMATO"),
        }
    }
}

impl Default for EventColor {
    fn default() -> EventColor {
        Self::None
    }
}

